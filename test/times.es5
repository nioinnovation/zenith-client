'use strict';

var timesSuite = function timesSuite(getData) {
  return function () {
    var data = undefined;

    before(function () {
      data = getData();
    });

    var range = function range(count) {
      return Array.from(Array(count).keys());
    };

    beforeEach(assertCompletes(function () {
      var rows = range(16).map(function (i) {
        return {
          id: i,
          value: i % 4,
          time: new Date(Math.floor(i / 4))
        };
      });
      return data.store(rows).toArray().do(function (res) {
        assert.isArray(res);
        assert.lengthOf(res, 16);
      });
    }));

    it('finds a document by a field with a time value', assertCompletes(function () {
      return data.find({ time: new Date(0) }).fetch().do(function (res) {
        return assert.deepEqual(res, {
          id: 0,
          time: new Date(0),
          value: 0
        });
      });
    }));

    it('finds a document by a time field and another field', assertCompletes(function () {
      return data.find({ value: 1, time: new Date(3) }).fetch().do(function (res) {
        return assert.deepEqual(res, {
          id: 13,
          value: 1,
          time: new Date(3)
        });
      });
    }));

    it('finds all documents by a field with a time value', assertCompletes(function () {
      return data.findAll({ time: new Date(2) }).fetch({ asCursor: false }).do(function (res) {
        return assert.deepEqual(res, range(4).map(function (i) {
          return {
            id: i + 8,
            value: i,
            time: new Date(2)
          };
        }));
      });
    }));

    it('finds all documents by a time field and another field', assertCompletes(function () {
      return data.findAll({ value: 2, time: new Date(3) }).fetch({ asCursor: false }).do(function (res) {
        return assert.deepEqual(res, [{
          id: 14,
          value: 2,
          time: new Date(3)
        }]);
      });
    }));

    it('finds all documents bounded above by a time', assertCompletes(function () {
      return data.findAll({ value: 3 }).above({ time: new Date(1) }).fetch({ asCursor: false }).do(function (res) {
        return assert.deepEqual(res, range(3).map(function (i) {
          return {
            id: 3 + (i + 1) * 4,
            value: 3,
            time: new Date(i + 1)
          };
        }));
      });
    }));

    it('finds all documents between two times', assertCompletes(function () {
      return data.findAll({ value: 2 }).above({ time: new Date(1) }).below({ time: new Date(3) }).fetch({ asCursor: false }).do(function (res) {
        return assert.deepEqual(res, [{ id: 6, value: 2, time: new Date(1) }, { id: 10, value: 2, time: new Date(2) }]);
      });
    }));
  };
}; // Testing `find`