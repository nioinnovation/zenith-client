'use strict';
// This test suite covers various edge cases in the Horizon client library API.
// It does not cover correctness of the full system in various circumstances.
// The purpose of the API test suite is to act as a runnable, checkable spec for
// API of the client library. This also doesn't cover subscriptions, there is a
// separate test suite for that.

chai.config.showDiff = true;
var assert = chai.assert;
var Horizon = require('Horizon');
Rx.config.longStackSupport = true;

// Test the methods and event callbacks on the Horizon object.
describe('Horizon Object API', horizonObjectSuite);

// Test the core client library API
describe('Core API tests', function () {
  // The connection for our tests
  var horizon = undefined,
      data = undefined;

  var getHorizon = function getHorizon() {
    return horizon;
  };
  var getData = function getData() {
    return data;
  };

  // Set up the horizon connection before running these tests.
  before(function (done) {
    horizon = Horizon('localhost:8181', { secure: false, lazyWrites: true });
    horizon.connect(function (err) {
      return done(err);
    });
    horizon.onConnected(function () {
      data = horizon('test_data');
      done();
    });
  });

  // Kill the horizon connection after running these tests.
  after(function (done) {
    horizon.dispose();
    horizon.onDisconnected(function () {
      return done();
    });
  });

  // Test the mutation commands
  describe('Storage API', function () {
    // Drop all data after each test
    afterEach(function (done) {
      return removeAllData(data, done);
    });

    describe('Testing `store`', storeSuite(getData));
    describe('Testing `insert`', insertSuite(getData));
    describe('Testing `upsert`', upsertSuite(getData));
    describe('Testing `update`', updateSuite(getData));
    describe('Testing `replace`', replaceSuite(getData));
    describe('Testing `times`', timesSuite(getData));
  }); // Storage API

  describe('Testing `remove`', removeSuite(getData));
  describe('Testing `removeAll`', removeAllSuite(getData));

  // Test the lookup API
  describe('Lookup API', function () {
    var testData = [{ id: 1, a: 10 }, { id: 2, a: 20, b: 1 }, { id: 3, a: 20, b: 2 }, { id: 4, a: 20, b: 3 }, { id: 5, a: 60 }, { id: 6, a: 50 }];

    var getTestData = function getTestData() {
      return testData;
    };

    // Drop all the existing data
    before(function (done) {
      removeAllData(data, done);
    });

    // Insert the test data and make sure it's in
    before(assertCompletes(function () {
      return data.store(testData).ignoreElements() // we don't care about the results
      .concat(data.fetch({ asCursor: false }))
      // Make sure it's there
      .do(function (res) {
        return assert.sameDeepMembers(res, testData);
      });
    }));

    describe('Testing full collection read', collectionSuite(getHorizon, getData, getTestData));
    describe('Testing `find`', findSuite(getData));
    describe('Testing `findAll`', findAllSuite(getData));
    describe('Testing `order`', orderSuite(getData, getTestData));
    describe('Testing `limit`', limitSuite(getData));
    describe('Testing `above`', aboveSuite(getData));
    describe('Testing `below`', belowSuite(getData));
    describe('Test `above/below/limit` chaining variations', chainingSuite(getData));
  }); // Test the lookup API

  // Test the subscriptions API
  describe("Subscriptions API", function () {

    // Drop all the existing data
    beforeEach(function (done) {
      removeAllData(data, done);
    });

    describe("Testing `find` subscriptions", findSubscriptionSuite(getData));
    describe("Testing `findAll` subscriptions", findAllSubscriptionSuite(getData));
    describe("Testing `above` subscriptions", aboveSubscriptionSuite(getData));
    describe("Testing `below` subscriptions", belowSubscriptionSuite(getData));
  }); // Test the subscriptions API
}); // Core API tests